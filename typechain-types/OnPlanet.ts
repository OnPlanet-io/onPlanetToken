/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OnPlanetInterface extends utils.Interface {
  contractName: "OnPlanet";
  functions: {
    "_buybackFee()": FunctionFragment;
    "_buyback_token_addr()": FunctionFragment;
    "_inBuybackFee()": FunctionFragment;
    "_inTaxFee()": FunctionFragment;
    "_inTeamFee()": FunctionFragment;
    "_maxSellCount()": FunctionFragment;
    "_maxTxAmount()": FunctionFragment;
    "_onPlanetEcosystemContractAdd(address)": FunctionFragment;
    "_outBuybackFee()": FunctionFragment;
    "_outTaxFee()": FunctionFragment;
    "_outTeamFee()": FunctionFragment;
    "_taxFee()": FunctionFragment;
    "_teamFee()": FunctionFragment;
    "allEcosystemContracts(uint256)": FunctionFragment;
    "allEcosystemContractsLength()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyBackEnabled()": FunctionFragment;
    "buyBackUpperLimitAmount()": FunctionFragment;
    "buybackOwner()": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "devAddress()": FunctionFragment;
    "ethBuyBack()": FunctionFragment;
    "excludeFromFee(address)": FunctionFragment;
    "excludeFromReward(address)": FunctionFragment;
    "inTradingStartCoolDown()": FunctionFragment;
    "includeInFee(address)": FunctionFragment;
    "includeInReward(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "isExcludedFromReward(address)": FunctionFragment;
    "isReflection()": FunctionFragment;
    "isTradingEnabled()": FunctionFragment;
    "manualBuyback(uint256,uint256)": FunctionFragment;
    "marketingAddress()": FunctionFragment;
    "maxTxCooldownAmount()": FunctionFragment;
    "minimumTokensBeforeSwap()": FunctionFragment;
    "multiFeeOn()": FunctionFragment;
    "name()": FunctionFragment;
    "onPlanetEcosystemContractRemove(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "reflectionFromToken(uint256,bool)": FunctionFragment;
    "setBotAddress(address,bool)": FunctionFragment;
    "setBuyBackEnabled(bool)": FunctionFragment;
    "setBuyBackTokenAddress(address)": FunctionFragment;
    "setBuybackMinAvailability(uint256,uint256)": FunctionFragment;
    "setBuybackTriggerTokenLimit(uint256)": FunctionFragment;
    "setBuybackUpperLimit(uint256,uint256)": FunctionFragment;
    "setDefaultInFeePercent(uint256,uint256,uint256)": FunctionFragment;
    "setDefaultOutFeePercent(uint256,uint256,uint256)": FunctionFragment;
    "setDeveloperAddress(address)": FunctionFragment;
    "setEthBuyback(bool)": FunctionFragment;
    "setMarketingAddress(address)": FunctionFragment;
    "setMaxSellCount(uint256)": FunctionFragment;
    "setMaxTxAmount(uint256)": FunctionFragment;
    "setMultiFeeOn(bool)": FunctionFragment;
    "setNumTokensSellToAddToLiquidity(uint256)": FunctionFragment;
    "setReflectionEnabled(bool)": FunctionFragment;
    "setReflectionOn(bool)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "setTradingEnabled(uint256,uint256)": FunctionFragment;
    "stakingAddress()": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenFromReflection(uint256)": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferBalance(address)": FunctionFragment;
    "transferBuybackOwnership(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateStakingAddress(address)": FunctionFragment;
    "zeroAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_buybackFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_buyback_token_addr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_inBuybackFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_inTaxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_inTeamFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxSellCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_onPlanetEcosystemContractAdd",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_outBuybackFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_outTaxFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_outTeamFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_taxFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "_teamFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allEcosystemContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allEcosystemContractsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyBackEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackUpperLimitAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buybackOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethBuyBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inTradingStartCoolDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReflection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualBuyback",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxCooldownAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTokensBeforeSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiFeeOn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onPlanetEcosystemContractRemove",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuybackMinAvailability",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuybackTriggerTokenLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuybackUpperLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultInFeePercent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOutFeePercent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeveloperAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthBuyback",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSellCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiFeeOn",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumTokensSellToAddToLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReflectionEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReflectionOn",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingEnabled",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBuybackOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zeroAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_buybackFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_buyback_token_addr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_inBuybackFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_inTaxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_inTeamFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_maxSellCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_onPlanetEcosystemContractAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_outBuybackFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_outTaxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_outTeamFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_taxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_teamFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allEcosystemContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allEcosystemContractsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBackEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackUpperLimitAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buybackOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethBuyBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inTradingStartCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualBuyback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTxCooldownAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTokensBeforeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiFeeOn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onPlanetEcosystemContractRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuybackMinAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuybackTriggerTokenLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuybackUpperLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultInFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOutFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeveloperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthBuyback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSellCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiFeeOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumTokensSellToAddToLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReflectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReflectionOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBuybackOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroAddress",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BuyBackEnabledUpdated(bool)": EventFragment;
    "BuyBackTriggerTokenLimitUpdated(uint256,uint256)": EventFragment;
    "BuybackMinAvailabilityUpdated(uint256,uint256)": EventFragment;
    "BuybackUpperLimitUpdated(uint256,uint256)": EventFragment;
    "EthBuyBack(bool)": EventFragment;
    "ExcludeFromFeeUpdated(address)": EventFragment;
    "IncludeInFeeUpdated(address)": EventFragment;
    "LiquidityFeeUpdated(uint256,uint256)": EventFragment;
    "MaxTxAmountUpdated(uint256,uint256)": EventFragment;
    "MinTokensBeforeSwapUpdated(uint256,uint256)": EventFragment;
    "OnPlanetEcosystemContractAdded(address)": EventFragment;
    "OnPlanetEcosystemContractRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakingAddressUpdated(address)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "SwapAndLiquifyEnabledUpdated(bool)": EventFragment;
    "SwapETHForTokens(uint256,address[])": EventFragment;
    "SwapTokensForETH(uint256,address[])": EventFragment;
    "SwapTokensForTokens(uint256,address[])": EventFragment;
    "TradingEnabled()": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyBackEnabledUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BuyBackTriggerTokenLimitUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BuybackMinAvailabilityUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuybackUpperLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthBuyBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncludeInFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTxAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinTokensBeforeSwapUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OnPlanetEcosystemContractAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OnPlanetEcosystemContractRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapAndLiquifyEnabledUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapETHForTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapTokensForETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapTokensForTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BuyBackEnabledUpdatedEvent = TypedEvent<
  [boolean],
  { enabled: boolean }
>;

export type BuyBackEnabledUpdatedEventFilter =
  TypedEventFilter<BuyBackEnabledUpdatedEvent>;

export type BuyBackTriggerTokenLimitUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevValue: BigNumber; newValue: BigNumber }
>;

export type BuyBackTriggerTokenLimitUpdatedEventFilter =
  TypedEventFilter<BuyBackTriggerTokenLimitUpdatedEvent>;

export type BuybackMinAvailabilityUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevValue: BigNumber; newValue: BigNumber }
>;

export type BuybackMinAvailabilityUpdatedEventFilter =
  TypedEventFilter<BuybackMinAvailabilityUpdatedEvent>;

export type BuybackUpperLimitUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevValue: BigNumber; newValue: BigNumber }
>;

export type BuybackUpperLimitUpdatedEventFilter =
  TypedEventFilter<BuybackUpperLimitUpdatedEvent>;

export type EthBuyBackEvent = TypedEvent<[boolean], { enabled: boolean }>;

export type EthBuyBackEventFilter = TypedEventFilter<EthBuyBackEvent>;

export type ExcludeFromFeeUpdatedEvent = TypedEvent<
  [string],
  { account: string }
>;

export type ExcludeFromFeeUpdatedEventFilter =
  TypedEventFilter<ExcludeFromFeeUpdatedEvent>;

export type IncludeInFeeUpdatedEvent = TypedEvent<
  [string],
  { account: string }
>;

export type IncludeInFeeUpdatedEventFilter =
  TypedEventFilter<IncludeInFeeUpdatedEvent>;

export type LiquidityFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevValue: BigNumber; newValue: BigNumber }
>;

export type LiquidityFeeUpdatedEventFilter =
  TypedEventFilter<LiquidityFeeUpdatedEvent>;

export type MaxTxAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevValue: BigNumber; newValue: BigNumber }
>;

export type MaxTxAmountUpdatedEventFilter =
  TypedEventFilter<MaxTxAmountUpdatedEvent>;

export type MinTokensBeforeSwapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevValue: BigNumber; newValue: BigNumber }
>;

export type MinTokensBeforeSwapUpdatedEventFilter =
  TypedEventFilter<MinTokensBeforeSwapUpdatedEvent>;

export type OnPlanetEcosystemContractAddedEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type OnPlanetEcosystemContractAddedEventFilter =
  TypedEventFilter<OnPlanetEcosystemContractAddedEvent>;

export type OnPlanetEcosystemContractRemovedEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type OnPlanetEcosystemContractRemovedEventFilter =
  TypedEventFilter<OnPlanetEcosystemContractRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakingAddressUpdatedEvent = TypedEvent<
  [string],
  { _addr: string }
>;

export type StakingAddressUpdatedEventFilter =
  TypedEventFilter<StakingAddressUpdatedEvent>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    tokensSwapped: BigNumber;
    ethReceived: BigNumber;
    tokensIntoLiquidity: BigNumber;
  }
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export type SwapAndLiquifyEnabledUpdatedEvent = TypedEvent<
  [boolean],
  { enabled: boolean }
>;

export type SwapAndLiquifyEnabledUpdatedEventFilter =
  TypedEventFilter<SwapAndLiquifyEnabledUpdatedEvent>;

export type SwapETHForTokensEvent = TypedEvent<
  [BigNumber, string[]],
  { amountIn: BigNumber; path: string[] }
>;

export type SwapETHForTokensEventFilter =
  TypedEventFilter<SwapETHForTokensEvent>;

export type SwapTokensForETHEvent = TypedEvent<
  [BigNumber, string[]],
  { amountIn: BigNumber; path: string[] }
>;

export type SwapTokensForETHEventFilter =
  TypedEventFilter<SwapTokensForETHEvent>;

export type SwapTokensForTokensEvent = TypedEvent<
  [BigNumber, string[]],
  { amountIn: BigNumber; path: string[] }
>;

export type SwapTokensForTokensEventFilter =
  TypedEventFilter<SwapTokensForTokensEvent>;

export type TradingEnabledEvent = TypedEvent<[], {}>;

export type TradingEnabledEventFilter = TypedEventFilter<TradingEnabledEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface OnPlanet extends BaseContract {
  contractName: "OnPlanet";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OnPlanetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _buybackFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _buyback_token_addr(overrides?: CallOverrides): Promise<[string]>;

    _inBuybackFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _inTaxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _inTeamFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxSellCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _onPlanetEcosystemContractAdd(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _outBuybackFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _outTaxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _outTeamFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _taxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _teamFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    allEcosystemContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allEcosystemContractsLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBackEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    buyBackUpperLimitAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    buybackOwner(overrides?: CallOverrides): Promise<[string]>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    ethBuyBack(overrides?: CallOverrides): Promise<[boolean]>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inTradingStartCoolDown(overrides?: CallOverrides): Promise<[boolean]>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReflection(overrides?: CallOverrides): Promise<[boolean]>;

    isTradingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    manualBuyback(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketingAddress(overrides?: CallOverrides): Promise<[string]>;

    maxTxCooldownAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumTokensBeforeSwap(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiFeeOn(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onPlanetEcosystemContractRemove(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBotAddress(
      _botAddress: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyBackEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyBackTokenAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuybackMinAvailability(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuybackTriggerTokenLimit(
      _buyBackTriggerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuybackUpperLimit(
      buyBackLimit: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultInFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultOutFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeveloperAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEthBuyback(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingAddress(
      _marketingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSellCount(
      maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTxAmount(
      maxTxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiFeeOn(
      isMultiFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNumTokensSellToAddToLiquidity(
      _minimumTokensBeforeSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReflectionEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReflectionOn(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradingEnabled(
      _tradeStartDelay: BigNumberish,
      _tradeStartCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingAddress(overrides?: CallOverrides): Promise<[string]>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBalance(
      _transferWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBuybackOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateStakingAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zeroAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  _buybackFee(overrides?: CallOverrides): Promise<BigNumber>;

  _buyback_token_addr(overrides?: CallOverrides): Promise<string>;

  _inBuybackFee(overrides?: CallOverrides): Promise<BigNumber>;

  _inTaxFee(overrides?: CallOverrides): Promise<BigNumber>;

  _inTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

  _maxSellCount(overrides?: CallOverrides): Promise<BigNumber>;

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _onPlanetEcosystemContractAdd(
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _outBuybackFee(overrides?: CallOverrides): Promise<BigNumber>;

  _outTaxFee(overrides?: CallOverrides): Promise<BigNumber>;

  _outTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

  _taxFee(overrides?: CallOverrides): Promise<BigNumber>;

  _teamFee(overrides?: CallOverrides): Promise<BigNumber>;

  allEcosystemContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allEcosystemContractsLength(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyBackEnabled(overrides?: CallOverrides): Promise<boolean>;

  buyBackUpperLimitAmount(overrides?: CallOverrides): Promise<BigNumber>;

  buybackOwner(overrides?: CallOverrides): Promise<string>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  ethBuyBack(overrides?: CallOverrides): Promise<boolean>;

  excludeFromFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inTradingStartCoolDown(overrides?: CallOverrides): Promise<boolean>;

  includeInFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includeInReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromReward(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReflection(overrides?: CallOverrides): Promise<boolean>;

  isTradingEnabled(overrides?: CallOverrides): Promise<boolean>;

  manualBuyback(
    amount: BigNumberish,
    numOfDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketingAddress(overrides?: CallOverrides): Promise<string>;

  maxTxCooldownAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minimumTokensBeforeSwap(overrides?: CallOverrides): Promise<BigNumber>;

  multiFeeOn(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onPlanetEcosystemContractRemove(
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  reflectionFromToken(
    tAmount: BigNumberish,
    deductTransferFee: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBotAddress(
    _botAddress: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyBackEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyBackTokenAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuybackMinAvailability(
    amount: BigNumberish,
    numOfDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuybackTriggerTokenLimit(
    _buyBackTriggerLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuybackUpperLimit(
    buyBackLimit: BigNumberish,
    numOfDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultInFeePercent(
    tax: BigNumberish,
    buyback: BigNumberish,
    team: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultOutFeePercent(
    tax: BigNumberish,
    buyback: BigNumberish,
    team: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeveloperAddress(
    _devAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEthBuyback(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingAddress(
    _marketingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSellCount(
    maxCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTxAmount(
    maxTxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiFeeOn(
    isMultiFee: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNumTokensSellToAddToLiquidity(
    _minimumTokensBeforeSwap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReflectionEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReflectionOn(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradingEnabled(
    _tradeStartDelay: BigNumberish,
    _tradeStartCoolDown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingAddress(overrides?: CallOverrides): Promise<string>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenFromReflection(
    rAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBalance(
    _transferWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBuybackOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateStakingAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zeroAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _buybackFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyback_token_addr(overrides?: CallOverrides): Promise<string>;

    _inBuybackFee(overrides?: CallOverrides): Promise<BigNumber>;

    _inTaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _inTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _maxSellCount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _onPlanetEcosystemContractAdd(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _outBuybackFee(overrides?: CallOverrides): Promise<BigNumber>;

    _outTaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _outTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _teamFee(overrides?: CallOverrides): Promise<BigNumber>;

    allEcosystemContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allEcosystemContractsLength(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBackEnabled(overrides?: CallOverrides): Promise<boolean>;

    buyBackUpperLimitAmount(overrides?: CallOverrides): Promise<BigNumber>;

    buybackOwner(overrides?: CallOverrides): Promise<string>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    ethBuyBack(overrides?: CallOverrides): Promise<boolean>;

    excludeFromFee(account: string, overrides?: CallOverrides): Promise<void>;

    excludeFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    inTradingStartCoolDown(overrides?: CallOverrides): Promise<boolean>;

    includeInFee(account: string, overrides?: CallOverrides): Promise<void>;

    includeInReward(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReflection(overrides?: CallOverrides): Promise<boolean>;

    isTradingEnabled(overrides?: CallOverrides): Promise<boolean>;

    manualBuyback(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marketingAddress(overrides?: CallOverrides): Promise<string>;

    maxTxCooldownAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTokensBeforeSwap(overrides?: CallOverrides): Promise<BigNumber>;

    multiFeeOn(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onPlanetEcosystemContractRemove(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotAddress(
      _botAddress: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackTokenAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuybackMinAvailability(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuybackTriggerTokenLimit(
      _buyBackTriggerLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuybackUpperLimit(
      buyBackLimit: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultInFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultOutFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeveloperAddress(
      _devAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEthBuyback(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setMarketingAddress(
      _marketingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSellCount(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxAmount(
      maxTxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiFeeOn(
      isMultiFee: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setNumTokensSellToAddToLiquidity(
      _minimumTokensBeforeSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReflectionEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReflectionOn(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradingEnabled(
      _tradeStartDelay: BigNumberish,
      _tradeStartCoolDown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingAddress(overrides?: CallOverrides): Promise<string>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferBalance(
      _transferWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBuybackOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateStakingAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zeroAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BuyBackEnabledUpdated(bool)"(
      enabled?: null
    ): BuyBackEnabledUpdatedEventFilter;
    BuyBackEnabledUpdated(enabled?: null): BuyBackEnabledUpdatedEventFilter;

    "BuyBackTriggerTokenLimitUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): BuyBackTriggerTokenLimitUpdatedEventFilter;
    BuyBackTriggerTokenLimitUpdated(
      prevValue?: null,
      newValue?: null
    ): BuyBackTriggerTokenLimitUpdatedEventFilter;

    "BuybackMinAvailabilityUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): BuybackMinAvailabilityUpdatedEventFilter;
    BuybackMinAvailabilityUpdated(
      prevValue?: null,
      newValue?: null
    ): BuybackMinAvailabilityUpdatedEventFilter;

    "BuybackUpperLimitUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): BuybackUpperLimitUpdatedEventFilter;
    BuybackUpperLimitUpdated(
      prevValue?: null,
      newValue?: null
    ): BuybackUpperLimitUpdatedEventFilter;

    "EthBuyBack(bool)"(enabled?: null): EthBuyBackEventFilter;
    EthBuyBack(enabled?: null): EthBuyBackEventFilter;

    "ExcludeFromFeeUpdated(address)"(
      account?: null
    ): ExcludeFromFeeUpdatedEventFilter;
    ExcludeFromFeeUpdated(account?: null): ExcludeFromFeeUpdatedEventFilter;

    "IncludeInFeeUpdated(address)"(
      account?: null
    ): IncludeInFeeUpdatedEventFilter;
    IncludeInFeeUpdated(account?: null): IncludeInFeeUpdatedEventFilter;

    "LiquidityFeeUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): LiquidityFeeUpdatedEventFilter;
    LiquidityFeeUpdated(
      prevValue?: null,
      newValue?: null
    ): LiquidityFeeUpdatedEventFilter;

    "MaxTxAmountUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): MaxTxAmountUpdatedEventFilter;
    MaxTxAmountUpdated(
      prevValue?: null,
      newValue?: null
    ): MaxTxAmountUpdatedEventFilter;

    "MinTokensBeforeSwapUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): MinTokensBeforeSwapUpdatedEventFilter;
    MinTokensBeforeSwapUpdated(
      prevValue?: null,
      newValue?: null
    ): MinTokensBeforeSwapUpdatedEventFilter;

    "OnPlanetEcosystemContractAdded(address)"(
      contractAddress?: null
    ): OnPlanetEcosystemContractAddedEventFilter;
    OnPlanetEcosystemContractAdded(
      contractAddress?: null
    ): OnPlanetEcosystemContractAddedEventFilter;

    "OnPlanetEcosystemContractRemoved(address)"(
      contractAddress?: null
    ): OnPlanetEcosystemContractRemovedEventFilter;
    OnPlanetEcosystemContractRemoved(
      contractAddress?: null
    ): OnPlanetEcosystemContractRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StakingAddressUpdated(address)"(
      _addr?: null
    ): StakingAddressUpdatedEventFilter;
    StakingAddressUpdated(_addr?: null): StakingAddressUpdatedEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;

    "SwapAndLiquifyEnabledUpdated(bool)"(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;
    SwapAndLiquifyEnabledUpdated(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;

    "SwapETHForTokens(uint256,address[])"(
      amountIn?: null,
      path?: null
    ): SwapETHForTokensEventFilter;
    SwapETHForTokens(amountIn?: null, path?: null): SwapETHForTokensEventFilter;

    "SwapTokensForETH(uint256,address[])"(
      amountIn?: null,
      path?: null
    ): SwapTokensForETHEventFilter;
    SwapTokensForETH(amountIn?: null, path?: null): SwapTokensForETHEventFilter;

    "SwapTokensForTokens(uint256,address[])"(
      amountIn?: null,
      path?: null
    ): SwapTokensForTokensEventFilter;
    SwapTokensForTokens(
      amountIn?: null,
      path?: null
    ): SwapTokensForTokensEventFilter;

    "TradingEnabled()"(): TradingEnabledEventFilter;
    TradingEnabled(): TradingEnabledEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _buybackFee(overrides?: CallOverrides): Promise<BigNumber>;

    _buyback_token_addr(overrides?: CallOverrides): Promise<BigNumber>;

    _inBuybackFee(overrides?: CallOverrides): Promise<BigNumber>;

    _inTaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _inTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _maxSellCount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _onPlanetEcosystemContractAdd(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _outBuybackFee(overrides?: CallOverrides): Promise<BigNumber>;

    _outTaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _outTeamFee(overrides?: CallOverrides): Promise<BigNumber>;

    _taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _teamFee(overrides?: CallOverrides): Promise<BigNumber>;

    allEcosystemContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allEcosystemContractsLength(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBackEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackUpperLimitAmount(overrides?: CallOverrides): Promise<BigNumber>;

    buybackOwner(overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    ethBuyBack(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inTradingStartCoolDown(overrides?: CallOverrides): Promise<BigNumber>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReflection(overrides?: CallOverrides): Promise<BigNumber>;

    isTradingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    manualBuyback(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxTxCooldownAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTokensBeforeSwap(overrides?: CallOverrides): Promise<BigNumber>;

    multiFeeOn(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onPlanetEcosystemContractRemove(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotAddress(
      _botAddress: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyBackEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyBackTokenAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuybackMinAvailability(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuybackTriggerTokenLimit(
      _buyBackTriggerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuybackUpperLimit(
      buyBackLimit: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultInFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultOutFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeveloperAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEthBuyback(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingAddress(
      _marketingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSellCount(
      maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTxAmount(
      maxTxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiFeeOn(
      isMultiFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNumTokensSellToAddToLiquidity(
      _minimumTokensBeforeSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReflectionEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReflectionOn(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradingEnabled(
      _tradeStartDelay: BigNumberish,
      _tradeStartCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBalance(
      _transferWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBuybackOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateStakingAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zeroAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _buybackFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _buyback_token_addr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inBuybackFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _inTaxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _inTeamFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxSellCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _onPlanetEcosystemContractAdd(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _outBuybackFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _outTaxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _outTeamFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _taxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _teamFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allEcosystemContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allEcosystemContractsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBackEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackUpperLimitAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buybackOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethBuyBack(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inTradingStartCoolDown(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReflection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTradingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualBuyback(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTxCooldownAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumTokensBeforeSwap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiFeeOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onPlanetEcosystemContractRemove(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBotAddress(
      _botAddress: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyBackEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyBackTokenAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuybackMinAvailability(
      amount: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuybackTriggerTokenLimit(
      _buyBackTriggerLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuybackUpperLimit(
      buyBackLimit: BigNumberish,
      numOfDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultInFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultOutFeePercent(
      tax: BigNumberish,
      buyback: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeveloperAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEthBuyback(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingAddress(
      _marketingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSellCount(
      maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxAmount(
      maxTxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiFeeOn(
      isMultiFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNumTokensSellToAddToLiquidity(
      _minimumTokensBeforeSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReflectionEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReflectionOn(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradingEnabled(
      _tradeStartDelay: BigNumberish,
      _tradeStartCoolDown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBalance(
      _transferWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBuybackOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateStakingAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zeroAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
