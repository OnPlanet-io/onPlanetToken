/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OPAgreementInterface extends utils.Interface {
  contractName: "OPAgreement";
  functions: {
    "OPToken()": FunctionFragment;
    "isInAgreement(address)": FunctionFragment;
    "makeAgreement(uint256)": FunctionFragment;
    "stakedTokens(address)": FunctionFragment;
    "totalStakedTokens()": FunctionFragment;
    "validateAgreement(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "OPToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInAgreement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeAgreement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateAgreement",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "OPToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAgreement",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OPAgreement extends BaseContract {
  contractName: "OPAgreement";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OPAgreementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OPToken(overrides?: CallOverrides): Promise<[string]>;

    isInAgreement(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    makeAgreement(
      tokensToStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedTokens(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    validateAgreement(
      _user: string,
      remainingBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  OPToken(overrides?: CallOverrides): Promise<string>;

  isInAgreement(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  makeAgreement(
    tokensToStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  validateAgreement(
    _user: string,
    remainingBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    OPToken(overrides?: CallOverrides): Promise<string>;

    isInAgreement(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    makeAgreement(
      tokensToStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    validateAgreement(
      _user: string,
      remainingBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    OPToken(overrides?: CallOverrides): Promise<BigNumber>;

    isInAgreement(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    makeAgreement(
      tokensToStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    validateAgreement(
      _user: string,
      remainingBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OPToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInAgreement(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeAgreement(
      tokensToStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateAgreement(
      _user: string,
      remainingBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
