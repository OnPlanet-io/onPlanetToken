/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Math, MathInterface } from "../Math";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x48699bb9",
        type: "bytes32",
      },
    ],
    name: "c_0x48699bb9",
    outputs: [],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x609b610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80639df6e92b146038575b600080fd5b606160048036036020811015604c57600080fd5b81019080803590602001909291905050506063565b005b5056fea265627a7a72315820f9b76589667e51a2e4ee5d63604a70b719385b89bb571421faf19822372e02fe64736f6c63430005100032";

type MathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Math__factory extends ContractFactory {
  constructor(...args: MathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Math";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Math> {
    return super.deploy(overrides || {}) as Promise<Math>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Math {
    return super.attach(address) as Math;
  }
  connect(signer: Signer): Math__factory {
    return super.connect(signer) as Math__factory;
  }
  static readonly contractName: "Math";
  public readonly contractName: "Math";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathInterface {
    return new utils.Interface(_abi) as MathInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Math {
    return new Contract(address, _abi, signerOrProvider) as Math;
  }
}
