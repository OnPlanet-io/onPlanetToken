/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { UQ112x112, UQ112x112Interface } from "../UQ112x112";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xff8076b3",
        type: "bytes32",
      },
    ],
    name: "c_0xff8076b3",
    outputs: [],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x609b610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063574ba71b146038575b600080fd5b606160048036036020811015604c57600080fd5b81019080803590602001909291905050506063565b005b5056fea265627a7a72315820bb3ad274d90132c72193f8c6d403ec513f4bc834ba7bdff4ae369a77c67cac3764736f6c63430005100032";

type UQ112x112ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UQ112x112ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UQ112x112__factory extends ContractFactory {
  constructor(...args: UQ112x112ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UQ112x112";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UQ112x112> {
    return super.deploy(overrides || {}) as Promise<UQ112x112>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UQ112x112 {
    return super.attach(address) as UQ112x112;
  }
  connect(signer: Signer): UQ112x112__factory {
    return super.connect(signer) as UQ112x112__factory;
  }
  static readonly contractName: "UQ112x112";
  public readonly contractName: "UQ112x112";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UQ112x112Interface {
    return new utils.Interface(_abi) as UQ112x112Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UQ112x112 {
    return new Contract(address, _abi, signerOrProvider) as UQ112x112;
  }
}
